// MDIFastTemplates_1_1.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
MDPacketHeader_cref::MDPacketHeader_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDPacketHeader_cref::MDPacketHeader_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDPacketHeader_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDPacketHeader_cref::MDPacketHeader_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDPacketHeader_cref::MDPacketHeader_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDPacketHeader_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDPacketHeader_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<byte_vector_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<byte_vector_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

inline
MDPacketHeader_mref::MDPacketHeader_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDPacketHeader_mref::MDPacketHeader_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDPacketHeader_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDPacketHeader_mref::MDPacketHeader_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDPacketHeader_mref::MDPacketHeader_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDPacketHeader_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDPacketHeader_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<byte_vector_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<byte_vector_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
}

inline
MDPacketHeader::MDPacketHeader(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDPacketHeader::MDPacketHeader(
  const MDPacketHeader_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDPacketHeader::MDPacketHeader(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDPacketHeader::cref_type
MDPacketHeader::ref() const
{
  return MDPacketHeader::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDPacketHeader::cref_type
MDPacketHeader::cref() const
{
  return MDPacketHeader::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDPacketHeader::mref_type
MDPacketHeader::ref()
{
  return MDPacketHeader::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDPacketHeader::mref_type
MDPacketHeader::mref()
{
  return MDPacketHeader::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::uint32_cref
MDPacketHeader_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDPacketHeader_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDPacketHeader_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::byte_vector_cref
MDPacketHeader_cref::get_PacketSeqNum() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[1]);
}

inline mfast::byte_vector_cref
MDPacketHeader_cref::try_get_PacketSeqNum() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[1]);
}

inline mfast::byte_vector_mref
MDPacketHeader_mref::set_PacketSeqNum() const
{
  return static_cast<mfast::byte_vector_mref>((*this)[1]);
}

inline mfast::byte_vector_cref
MDPacketHeader_cref::get_SendingTime() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[2]);
}

inline mfast::byte_vector_cref
MDPacketHeader_cref::try_get_SendingTime() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[2]);
}

inline mfast::byte_vector_mref
MDPacketHeader_mref::set_SendingTime() const
{
  return static_cast<mfast::byte_vector_mref>((*this)[2]);
}

inline
ProductStateChange_cref::ProductStateChange_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
ProductStateChange_cref::ProductStateChange_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, ProductStateChange_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
ProductStateChange_cref::ProductStateChange_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
ProductStateChange_cref::ProductStateChange_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
ProductStateChange_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void ProductStateChange_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
}

inline
ProductStateChange_mref::ProductStateChange_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
ProductStateChange_mref::ProductStateChange_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, ProductStateChange_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
ProductStateChange_mref::ProductStateChange_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
ProductStateChange_mref::ProductStateChange_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
ProductStateChange_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void ProductStateChange_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
}

inline
ProductStateChange::ProductStateChange(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
ProductStateChange::ProductStateChange(
  const ProductStateChange_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
ProductStateChange::ProductStateChange(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline ProductStateChange::cref_type
ProductStateChange::ref() const
{
  return ProductStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline ProductStateChange::cref_type
ProductStateChange::cref() const
{
  return ProductStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline ProductStateChange::mref_type
ProductStateChange::ref()
{
  return ProductStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline ProductStateChange::mref_type
ProductStateChange::mref()
{
  return ProductStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
ProductStateChange_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
ProductStateChange_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_TradingSessionSubID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_TradSesStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_TradSesStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_TradSesStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_MarketCondition() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_MarketCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
ProductStateChange_mref::omit_MarketCondition() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
ProductStateChange_cref::get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::int64_cref
ProductStateChange_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[9]);
}

inline mfast::int64_cref
ProductStateChange_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[9]);
}

inline mfast::int64_mref
ProductStateChange_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[9]);
}

inline mfast::uint32_cref
ProductStateChange_cref::get_TESTradSesStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
ProductStateChange_cref::try_get_TESTradSesStatus() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
ProductStateChange_mref::set_TESTradSesStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
ProductStateChange_mref::omit_TESTradSesStatus() const
{
  (*this)[10].omit();
}

inline
MassInstrumentStateChange_cref::MassInstrumentStateChange_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MassInstrumentStateChange_cref::MassInstrumentStateChange_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MassInstrumentStateChange_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MassInstrumentStateChange_cref::MassInstrumentStateChange_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MassInstrumentStateChange_cref::MassInstrumentStateChange_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MassInstrumentStateChange_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MassInstrumentStateChange_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, default_operator_tag, properties_type< 2> >, ext_cref< typename SecMassStatGrp_cref::reference, sequence_element_tag,properties_type< 12> > > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[14]) );
}

inline
MassInstrumentStateChange_mref::MassInstrumentStateChange_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MassInstrumentStateChange_mref::MassInstrumentStateChange_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MassInstrumentStateChange_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MassInstrumentStateChange_mref::MassInstrumentStateChange_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MassInstrumentStateChange_mref::MassInstrumentStateChange_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MassInstrumentStateChange_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MassInstrumentStateChange_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[12]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, default_operator_tag, properties_type< 2> >, ext_mref< typename SecMassStatGrp_mref::reference, sequence_element_tag,properties_type< 12> > > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[14]) );
}

inline
MassInstrumentStateChange::MassInstrumentStateChange(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MassInstrumentStateChange::MassInstrumentStateChange(
  const MassInstrumentStateChange_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MassInstrumentStateChange::MassInstrumentStateChange(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MassInstrumentStateChange::cref_type
MassInstrumentStateChange::ref() const
{
  return MassInstrumentStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline MassInstrumentStateChange::cref_type
MassInstrumentStateChange::cref() const
{
  return MassInstrumentStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline MassInstrumentStateChange::mref_type
MassInstrumentStateChange::ref()
{
  return MassInstrumentStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MassInstrumentStateChange::mref_type
MassInstrumentStateChange::mref()
{
  return MassInstrumentStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MassInstrumentStateChange_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MassInstrumentStateChange_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_InstrumentScopeProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_InstrumentScopeProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_InstrumentScopeProductComplex() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_SecurityMassStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_SecurityMassStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_SecurityMassStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_SecurityMassTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_SecurityMassTradingStatus() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_SecurityMassTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MassInstrumentStateChange_mref::omit_SecurityMassTradingStatus() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_MassMarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_MassMarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_MassMarketCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_SecurityMassTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_SecurityMassTradingEvent() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_SecurityMassTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
MassInstrumentStateChange_mref::omit_SecurityMassTradingEvent() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_MassSoldOutIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_MassSoldOutIndicator() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_MassSoldOutIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MassInstrumentStateChange_mref::omit_MassSoldOutIndicator() const
{
  (*this)[10].omit();
}

inline mfast::int64_cref
MassInstrumentStateChange_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[11]);
}

inline mfast::int64_cref
MassInstrumentStateChange_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[11]);
}

inline mfast::int64_mref
MassInstrumentStateChange_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[11]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_TESSecurityMassStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_TESSecurityMassStatus() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_TESSecurityMassStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline
void
MassInstrumentStateChange_mref::omit_TESSecurityMassStatus() const
{
  (*this)[12].omit();
}

inline MassInstrumentStateChange_cref::SecMassStatGrp_cref
MassInstrumentStateChange_cref::get_SecMassStatGrp() const
{
  return static_cast<MassInstrumentStateChange_cref::SecMassStatGrp_cref>((*this)[13]);
}

inline MassInstrumentStateChange_cref::SecMassStatGrp_cref
MassInstrumentStateChange_cref::try_get_SecMassStatGrp() const
{
  return static_cast<MassInstrumentStateChange_cref::SecMassStatGrp_cref>((*this)[13]);
}

inline MassInstrumentStateChange_mref::SecMassStatGrp_mref
MassInstrumentStateChange_mref::set_SecMassStatGrp() const
{
  return static_cast<MassInstrumentStateChange_mref::SecMassStatGrp_mref>((*this)[13]);
}

inline
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::SecMassStatGrp_element_cref(
  const mfast::value_storage*   storage,
  MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::SecMassStatGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
}

template <typename Visitor>
inline void MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
}

inline mfast::int64_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[0]);
}

inline mfast::int64_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[0]);
}

inline mfast::int64_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_SecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_MarketCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_SoldOutIndicator() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::omit_SoldOutIndicator() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::get_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::SecMassStatGrp_element_cref::try_get_TESSecurityStatus() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::set_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
MassInstrumentStateChange_mref::SecMassStatGrp_element_mref::omit_TESSecurityStatus() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::get_LastFragment() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
MassInstrumentStateChange_cref::try_get_LastFragment() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
MassInstrumentStateChange_mref::set_LastFragment() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline
InstrumentStateChange_cref::InstrumentStateChange_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
InstrumentStateChange_cref::InstrumentStateChange_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, InstrumentStateChange_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
InstrumentStateChange_cref::InstrumentStateChange_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
InstrumentStateChange_cref::InstrumentStateChange_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
InstrumentStateChange_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void InstrumentStateChange_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
}

inline
InstrumentStateChange_mref::InstrumentStateChange_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
InstrumentStateChange_mref::InstrumentStateChange_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, InstrumentStateChange_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
InstrumentStateChange_mref::InstrumentStateChange_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
InstrumentStateChange_mref::InstrumentStateChange_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
InstrumentStateChange_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void InstrumentStateChange_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 0> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[13]) );
}

inline
InstrumentStateChange::InstrumentStateChange(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
InstrumentStateChange::InstrumentStateChange(
  const InstrumentStateChange_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
InstrumentStateChange::InstrumentStateChange(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline InstrumentStateChange::cref_type
InstrumentStateChange::ref() const
{
  return InstrumentStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline InstrumentStateChange::cref_type
InstrumentStateChange::cref() const
{
  return InstrumentStateChange::cref_type(my_storage_.of_group.content_, instruction());
}

inline InstrumentStateChange::mref_type
InstrumentStateChange::ref()
{
  return InstrumentStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline InstrumentStateChange::mref_type
InstrumentStateChange::mref()
{
  return InstrumentStateChange::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
InstrumentStateChange_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
InstrumentStateChange_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::int64_cref
InstrumentStateChange_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
InstrumentStateChange_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
InstrumentStateChange_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
InstrumentStateChange_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
InstrumentStateChange_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_SecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
InstrumentStateChange_mref::omit_SecurityTradingStatus() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_MarketCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
InstrumentStateChange_mref::omit_SecurityTradingEvent() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_SoldOutIndicator() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
InstrumentStateChange_mref::omit_SoldOutIndicator() const
{
  (*this)[11].omit();
}

inline mfast::int64_cref
InstrumentStateChange_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_cref
InstrumentStateChange_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[12]);
}

inline mfast::int64_mref
InstrumentStateChange_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[12]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::get_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
InstrumentStateChange_cref::try_get_TESSecurityStatus() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
InstrumentStateChange_mref::set_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
InstrumentStateChange_mref::omit_TESSecurityStatus() const
{
  (*this)[13].omit();
}

inline
DepthIncremental_cref::DepthIncremental_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
DepthIncremental_cref::DepthIncremental_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, DepthIncremental_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
DepthIncremental_cref::DepthIncremental_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
DepthIncremental_cref::DepthIncremental_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
DepthIncremental_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void DepthIncremental_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDIncGrp_cref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[4]) );
}

inline
DepthIncremental_mref::DepthIncremental_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
DepthIncremental_mref::DepthIncremental_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, DepthIncremental_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
DepthIncremental_mref::DepthIncremental_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
DepthIncremental_mref::DepthIncremental_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
DepthIncremental_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void DepthIncremental_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDIncGrp_mref::reference, sequence_element_tag,properties_type< 10> > > ((*this)[4]) );
}

inline
DepthIncremental::DepthIncremental(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
DepthIncremental::DepthIncremental(
  const DepthIncremental_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
DepthIncremental::DepthIncremental(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline DepthIncremental::cref_type
DepthIncremental::ref() const
{
  return DepthIncremental::cref_type(my_storage_.of_group.content_, instruction());
}

inline DepthIncremental::cref_type
DepthIncremental::cref() const
{
  return DepthIncremental::cref_type(my_storage_.of_group.content_, instruction());
}

inline DepthIncremental::mref_type
DepthIncremental::ref()
{
  return DepthIncremental::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline DepthIncremental::mref_type
DepthIncremental::mref()
{
  return DepthIncremental::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
DepthIncremental_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
DepthIncremental_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
DepthIncremental_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
DepthIncremental_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
DepthIncremental_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
DepthIncremental_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
DepthIncremental_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
DepthIncremental_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
DepthIncremental_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
DepthIncremental_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
DepthIncremental_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline DepthIncremental_cref::MDIncGrp_cref
DepthIncremental_cref::get_MDIncGrp() const
{
  return static_cast<DepthIncremental_cref::MDIncGrp_cref>((*this)[4]);
}

inline DepthIncremental_cref::MDIncGrp_cref
DepthIncremental_cref::try_get_MDIncGrp() const
{
  return static_cast<DepthIncremental_cref::MDIncGrp_cref>((*this)[4]);
}

inline DepthIncremental_mref::MDIncGrp_mref
DepthIncremental_mref::set_MDIncGrp() const
{
  return static_cast<DepthIncremental_mref::MDIncGrp_mref>((*this)[4]);
}

inline
DepthIncremental_cref::MDIncGrp_element_cref::MDIncGrp_element_cref(
  const mfast::value_storage*   storage,
  DepthIncremental_cref::MDIncGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
DepthIncremental_mref::MDIncGrp_element_mref::MDIncGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  DepthIncremental_mref::MDIncGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void DepthIncremental_cref::MDIncGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref< TradeEntryGrp_cref,  group_type_tag, properties_type< 9> > ((*this)[14]) );
}

template <typename Visitor>
inline void DepthIncremental_mref::MDIncGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref< TradeEntryGrp_mref, group_type_tag, properties_type< 9> > ((*this)[14]) );
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDOriginType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDOriginType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDOriginType() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[3]);
}

inline mfast::int64_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[3]);
}

inline mfast::ascii_string_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::ascii_string_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[4]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[5]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_MDEntryPx() const
{
  (*this)[5].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_MDEntrySize() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_NumberOfOrders() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_MDPriceLevel() const
{
  (*this)[8].omit();
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::int64_cref>((*this)[9]);
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[9]);
}

inline mfast::int64_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::int64_mref>((*this)[9]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_MDEntryTime() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_PotentialSecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_PotentialSecurityTradingEvent() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_PotentialSecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_PotentialSecurityTradingEvent() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_QuoteCondition() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_TotalBuyQuantity() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_TotalBuyQuantity() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_TotalBuyQuantity() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_TotalBuyQuantity() const
{
  (*this)[12].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_TotalSellQuantity() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_TotalSellQuantity() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_TotalSellQuantity() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_TotalSellQuantity() const
{
  (*this)[13].omit();
}


inline DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref
DepthIncremental_cref::MDIncGrp_element_cref::get_TradeEntryGrp() const
{
  if ((*this)[14].absent())
    return DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref(nullptr, DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::instruction_cptr(nullptr));
  return static_cast<DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref>((*this)[14]);
}


inline DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref
DepthIncremental_cref::MDIncGrp_element_cref::try_get_TradeEntryGrp() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref>((*this)[14]);
}

inline DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref
DepthIncremental_mref::MDIncGrp_element_mref::set_TradeEntryGrp() const
{
  this->field_storage(14)->present(true);
  return DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref((*this)[14]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::omit_TradeEntryGrp() const
{
  (*this)[14].omit();
}

inline
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::TradeEntryGrp_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::TradeEntryGrp_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, TradeEntryGrp_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::TradeEntryGrp_cref(
  const mfast::field_cref& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 3> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[4]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
}

inline
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::TradeEntryGrp_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::TradeEntryGrp_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, TradeEntryGrp_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::TradeEntryGrp_mref(
  const mfast::field_mref_base& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 3> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[4]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[15]) );
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_TrdType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_TrdType() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_TrdType() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_TrdType() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_AlgorithmicTradeIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_AlgorithmicTradeIndicator() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_AlgorithmicTradeIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_AlgorithmicTradeIndicator() const
{
  (*this)[1].omit();
}

inline mfast::uint64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_TradeCondition() const
{
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_TradeCondition() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[2]);
}

inline mfast::uint64_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_TradeCondition() const
{
  return static_cast<mfast::uint64_mref>((*this)[2]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_TradeCondition() const
{
  (*this)[2].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_MultiLegReportingType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_MultiLegReportingType() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_MultiLegReportingType() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_MultiLegReportingType() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_MultiLegPriceModel() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_MultiLegPriceModel() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_MultiLegPriceModel() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_MultiLegPriceModel() const
{
  (*this)[4].omit();
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_AggressorTime() const
{
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_AggressorTime() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[5]);
}

inline mfast::int64_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_AggressorTime() const
{
  return static_cast<mfast::int64_mref>((*this)[5]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_AggressorTime() const
{
  (*this)[5].omit();
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_RequestTime() const
{
  return static_cast<mfast::int64_cref>((*this)[6]);
}

inline mfast::int64_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_RequestTime() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[6]);
}

inline mfast::int64_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_RequestTime() const
{
  return static_cast<mfast::int64_mref>((*this)[6]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_RequestTime() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_AggressorSide() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_AggressorSide() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_AggressorSide() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_AggressorSide() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_NumberOfBuyOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_NumberOfBuyOrders() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_NumberOfBuyOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_NumberOfBuyOrders() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_NumberOfSellOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_NumberOfSellOrders() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_NumberOfSellOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_NumberOfSellOrders() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_TotalNumOfTrades() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_TotalNumOfTrades() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_TotalNumOfTrades() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_TotalNumOfTrades() const
{
  (*this)[10].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_RestingCxlQty() const
{
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_RestingCxlQty() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_RestingCxlQty() const
{
  return static_cast<mfast::decimal_mref>((*this)[11]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_RestingCxlQty() const
{
  (*this)[11].omit();
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_MDEntryID() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_MDEntryID() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_MDEntryID() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_MDEntryID() const
{
  (*this)[12].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_TotalTradedValue() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_TotalTradedValue() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_TotalTradedValue() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_TotalTradedValue() const
{
  (*this)[13].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_AverageTradedPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[14]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_AverageTradedPrice() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[14]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_AverageTradedPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[14]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_AverageTradedPrice() const
{
  (*this)[14].omit();
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::get_NonDisclosedTradeVolume() const
{
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_cref
DepthIncremental_cref::MDIncGrp_element_cref::TradeEntryGrp_cref::try_get_NonDisclosedTradeVolume() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[15]);
}

inline mfast::decimal_mref
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::set_NonDisclosedTradeVolume() const
{
  return static_cast<mfast::decimal_mref>((*this)[15]);
}

inline
void
DepthIncremental_mref::MDIncGrp_element_mref::TradeEntryGrp_mref::omit_NonDisclosedTradeVolume() const
{
  (*this)[15].omit();
}

inline
ComplexInstrumentUpdate_cref::ComplexInstrumentUpdate_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
ComplexInstrumentUpdate_cref::ComplexInstrumentUpdate_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, ComplexInstrumentUpdate_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
ComplexInstrumentUpdate_cref::ComplexInstrumentUpdate_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
ComplexInstrumentUpdate_cref::ComplexInstrumentUpdate_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
ComplexInstrumentUpdate_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename InstrmtLegGrp_cref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[11]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> >, ext_cref< typename MarketSegmentGrp_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
}

inline
ComplexInstrumentUpdate_mref::ComplexInstrumentUpdate_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
ComplexInstrumentUpdate_mref::ComplexInstrumentUpdate_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, ComplexInstrumentUpdate_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
ComplexInstrumentUpdate_mref::ComplexInstrumentUpdate_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
ComplexInstrumentUpdate_mref::ComplexInstrumentUpdate_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
ComplexInstrumentUpdate_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename InstrmtLegGrp_mref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[11]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> >, ext_mref< typename MarketSegmentGrp_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[13]) );
}

inline
ComplexInstrumentUpdate::ComplexInstrumentUpdate(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
ComplexInstrumentUpdate::ComplexInstrumentUpdate(
  const ComplexInstrumentUpdate_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
ComplexInstrumentUpdate::ComplexInstrumentUpdate(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline ComplexInstrumentUpdate::cref_type
ComplexInstrumentUpdate::ref() const
{
  return ComplexInstrumentUpdate::cref_type(my_storage_.of_group.content_, instruction());
}

inline ComplexInstrumentUpdate::cref_type
ComplexInstrumentUpdate::cref() const
{
  return ComplexInstrumentUpdate::cref_type(my_storage_.of_group.content_, instruction());
}

inline ComplexInstrumentUpdate::mref_type
ComplexInstrumentUpdate::ref()
{
  return ComplexInstrumentUpdate::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline ComplexInstrumentUpdate::mref_type
ComplexInstrumentUpdate::mref()
{
  return ComplexInstrumentUpdate::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
ComplexInstrumentUpdate_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
ComplexInstrumentUpdate_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_SecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_SecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_SecuritySubType() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_SecuritySubType() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::set_SecuritySubType() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline
void
ComplexInstrumentUpdate_mref::omit_SecuritySubType() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::set_ProductComplex() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::get_LegRatioMultiplier() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::try_get_LegRatioMultiplier() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::set_LegRatioMultiplier() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
ComplexInstrumentUpdate_mref::omit_LegRatioMultiplier() const
{
  (*this)[10].omit();
}

inline ComplexInstrumentUpdate_cref::InstrmtLegGrp_cref
ComplexInstrumentUpdate_cref::get_InstrmtLegGrp() const
{
  return static_cast<ComplexInstrumentUpdate_cref::InstrmtLegGrp_cref>((*this)[11]);
}

inline ComplexInstrumentUpdate_cref::InstrmtLegGrp_cref
ComplexInstrumentUpdate_cref::try_get_InstrmtLegGrp() const
{
  return static_cast<ComplexInstrumentUpdate_cref::InstrmtLegGrp_cref>((*this)[11]);
}

inline ComplexInstrumentUpdate_mref::InstrmtLegGrp_mref
ComplexInstrumentUpdate_mref::set_InstrmtLegGrp() const
{
  return static_cast<ComplexInstrumentUpdate_mref::InstrmtLegGrp_mref>((*this)[11]);
}

inline
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::InstrmtLegGrp_element_cref(
  const mfast::value_storage*   storage,
  ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::InstrmtLegGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegSymbol() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegSymbol() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegSymbol() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegSecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[1]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegSecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[1]);
}

inline mfast::int64_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegSecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegSecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegSecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegSecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegSecurityType() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegRatioQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegRatioQty() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegRatioQty() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegSide() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegSide() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegSide() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::decimal_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::get_LegPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
ComplexInstrumentUpdate_cref::InstrmtLegGrp_element_cref::try_get_LegPrice() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::set_LegPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
ComplexInstrumentUpdate_mref::InstrmtLegGrp_element_mref::omit_LegPrice() const
{
  (*this)[6].omit();
}

inline ComplexInstrumentUpdate_cref::MarketSegmentGrp_cref
ComplexInstrumentUpdate_cref::get_MarketSegmentGrp() const
{
  return static_cast<ComplexInstrumentUpdate_cref::MarketSegmentGrp_cref>((*this)[12]);
}

inline ComplexInstrumentUpdate_cref::MarketSegmentGrp_cref
ComplexInstrumentUpdate_cref::try_get_MarketSegmentGrp() const
{
  return static_cast<ComplexInstrumentUpdate_cref::MarketSegmentGrp_cref>((*this)[12]);
}

inline ComplexInstrumentUpdate_mref::MarketSegmentGrp_mref
ComplexInstrumentUpdate_mref::set_MarketSegmentGrp() const
{
  return static_cast<ComplexInstrumentUpdate_mref::MarketSegmentGrp_mref>((*this)[12]);
}

inline
ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::MarketSegmentGrp_element_cref(
  const mfast::value_storage*   storage,
  ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
ComplexInstrumentUpdate_mref::MarketSegmentGrp_element_mref::MarketSegmentGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  ComplexInstrumentUpdate_mref::MarketSegmentGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void ComplexInstrumentUpdate_mref::MarketSegmentGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::MarketSegmentGrp_element_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::get_ImpliedMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
ComplexInstrumentUpdate_cref::MarketSegmentGrp_element_cref::try_get_ImpliedMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
ComplexInstrumentUpdate_mref::MarketSegmentGrp_element_mref::set_ImpliedMarketIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[13]);
}

inline mfast::int64_cref
ComplexInstrumentUpdate_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[13]);
}

inline mfast::int64_mref
ComplexInstrumentUpdate_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[13]);
}

inline
QuoteRequest_cref::QuoteRequest_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
QuoteRequest_cref::QuoteRequest_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, QuoteRequest_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
QuoteRequest_cref::QuoteRequest_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
QuoteRequest_cref::QuoteRequest_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
QuoteRequest_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void QuoteRequest_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> >, ext_cref< typename QuotReqGrp_cref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[4]) );
}

inline
QuoteRequest_mref::QuoteRequest_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
QuoteRequest_mref::QuoteRequest_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, QuoteRequest_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
QuoteRequest_mref::QuoteRequest_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
QuoteRequest_mref::QuoteRequest_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
QuoteRequest_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void QuoteRequest_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> >, ext_mref< typename QuotReqGrp_mref::reference, sequence_element_tag,properties_type< 6> > > ((*this)[4]) );
}

inline
QuoteRequest::QuoteRequest(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
QuoteRequest::QuoteRequest(
  const QuoteRequest_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
QuoteRequest::QuoteRequest(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline QuoteRequest::cref_type
QuoteRequest::ref() const
{
  return QuoteRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::cref_type
QuoteRequest::cref() const
{
  return QuoteRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::mref_type
QuoteRequest::ref()
{
  return QuoteRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::mref_type
QuoteRequest::mref()
{
  return QuoteRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
QuoteRequest_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
QuoteRequest_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
QuoteRequest_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
QuoteRequest_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
QuoteRequest_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
QuoteRequest_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
QuoteRequest_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
QuoteRequest_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
QuoteRequest_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
QuoteRequest_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline QuoteRequest_cref::QuotReqGrp_cref
QuoteRequest_cref::get_QuotReqGrp() const
{
  return static_cast<QuoteRequest_cref::QuotReqGrp_cref>((*this)[4]);
}

inline QuoteRequest_cref::QuotReqGrp_cref
QuoteRequest_cref::try_get_QuotReqGrp() const
{
  return static_cast<QuoteRequest_cref::QuotReqGrp_cref>((*this)[4]);
}

inline QuoteRequest_mref::QuotReqGrp_mref
QuoteRequest_mref::set_QuotReqGrp() const
{
  return static_cast<QuoteRequest_mref::QuotReqGrp_mref>((*this)[4]);
}

inline
QuoteRequest_cref::QuotReqGrp_element_cref::QuotReqGrp_element_cref(
  const mfast::value_storage*   storage,
  QuoteRequest_cref::QuotReqGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
QuoteRequest_mref::QuotReqGrp_element_mref::QuotReqGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  QuoteRequest_mref::QuotReqGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void QuoteRequest_cref::QuotReqGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

template <typename Visitor>
inline void QuoteRequest_mref::QuotReqGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline mfast::int64_cref
QuoteRequest_cref::QuotReqGrp_element_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[0]);
}

inline mfast::int64_cref
QuoteRequest_cref::QuotReqGrp_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[0]);
}

inline mfast::int64_mref
QuoteRequest_mref::QuotReqGrp_element_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::QuotReqGrp_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::QuotReqGrp_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::uint32_cref
QuoteRequest_cref::QuotReqGrp_element_cref::get_Side() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
QuoteRequest_cref::QuotReqGrp_element_cref::try_get_Side() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
QuoteRequest_mref::QuotReqGrp_element_mref::set_Side() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline
void
QuoteRequest_mref::QuotReqGrp_element_mref::omit_Side() const
{
  (*this)[2].omit();
}

inline mfast::decimal_cref
QuoteRequest_cref::QuotReqGrp_element_cref::get_OrderQty() const
{
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_cref
QuoteRequest_cref::QuotReqGrp_element_cref::try_get_OrderQty() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[3]);
}

inline mfast::decimal_mref
QuoteRequest_mref::QuotReqGrp_element_mref::set_OrderQty() const
{
  return static_cast<mfast::decimal_mref>((*this)[3]);
}

inline
void
QuoteRequest_mref::QuotReqGrp_element_mref::omit_OrderQty() const
{
  (*this)[3].omit();
}

inline mfast::int64_cref
QuoteRequest_cref::QuotReqGrp_element_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
QuoteRequest_cref::QuotReqGrp_element_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
QuoteRequest_mref::QuotReqGrp_element_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline
CrossRequest_cref::CrossRequest_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
CrossRequest_cref::CrossRequest_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, CrossRequest_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
CrossRequest_cref::CrossRequest_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
CrossRequest_cref::CrossRequest_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
CrossRequest_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void CrossRequest_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, constant_operator_tag, properties_type< 3> >, ext_cref< typename CrossRequestSideGrp_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
}

inline
CrossRequest_mref::CrossRequest_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
CrossRequest_mref::CrossRequest_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, CrossRequest_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
CrossRequest_mref::CrossRequest_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
CrossRequest_mref::CrossRequest_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
CrossRequest_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void CrossRequest_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, constant_operator_tag, properties_type< 3> >, ext_mref< typename CrossRequestSideGrp_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[8]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[10]) );
}

inline
CrossRequest::CrossRequest(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
CrossRequest::CrossRequest(
  const CrossRequest_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
CrossRequest::CrossRequest(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline CrossRequest::cref_type
CrossRequest::ref() const
{
  return CrossRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline CrossRequest::cref_type
CrossRequest::cref() const
{
  return CrossRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline CrossRequest::mref_type
CrossRequest::ref()
{
  return CrossRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline CrossRequest::mref_type
CrossRequest::mref()
{
  return CrossRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
CrossRequest_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
CrossRequest_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
CrossRequest_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
CrossRequest_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
CrossRequest_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
CrossRequest_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
CrossRequest_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
CrossRequest_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
CrossRequest_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
CrossRequest_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
CrossRequest_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::int64_cref
CrossRequest_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
CrossRequest_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
CrossRequest_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
CrossRequest_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
CrossRequest_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::decimal_cref
CrossRequest_cref::get_OrderQty() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
CrossRequest_cref::try_get_OrderQty() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
CrossRequest_mref::set_OrderQty() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
CrossRequest_mref::omit_OrderQty() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
CrossRequest_cref::get_CrossRequestType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
CrossRequest_cref::try_get_CrossRequestType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
CrossRequest_mref::set_CrossRequestType() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline CrossRequest_cref::CrossRequestSideGrp_cref
CrossRequest_cref::get_CrossRequestSideGrp() const
{
  return static_cast<CrossRequest_cref::CrossRequestSideGrp_cref>((*this)[8]);
}

inline CrossRequest_cref::CrossRequestSideGrp_cref
CrossRequest_cref::try_get_CrossRequestSideGrp() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<CrossRequest_cref::CrossRequestSideGrp_cref>((*this)[8]);
}

inline CrossRequest_mref::CrossRequestSideGrp_mref
CrossRequest_mref::set_CrossRequestSideGrp() const
{
  return static_cast<CrossRequest_mref::CrossRequestSideGrp_mref>((*this)[8]);
}

inline
void
CrossRequest_mref::omit_CrossRequestSideGrp() const
{
  (*this)[8].omit();
}

inline
CrossRequest_cref::CrossRequestSideGrp_element_cref::CrossRequestSideGrp_element_cref(
  const mfast::value_storage*   storage,
  CrossRequest_cref::CrossRequestSideGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
CrossRequest_mref::CrossRequestSideGrp_element_mref::CrossRequestSideGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  CrossRequest_mref::CrossRequestSideGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void CrossRequest_cref::CrossRequestSideGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
}

template <typename Visitor>
inline void CrossRequest_mref::CrossRequestSideGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
}

inline mfast::uint32_cref
CrossRequest_cref::CrossRequestSideGrp_element_cref::get_Side() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
CrossRequest_cref::CrossRequestSideGrp_element_cref::try_get_Side() const
{
  if ((*this)[0].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
CrossRequest_mref::CrossRequestSideGrp_element_mref::set_Side() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline
void
CrossRequest_mref::CrossRequestSideGrp_element_mref::omit_Side() const
{
  (*this)[0].omit();
}

inline mfast::uint32_cref
CrossRequest_cref::CrossRequestSideGrp_element_cref::get_InputSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
CrossRequest_cref::CrossRequestSideGrp_element_cref::try_get_InputSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::decimal_cref
CrossRequest_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_cref
CrossRequest_cref::try_get_MDEntryPx() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_mref
CrossRequest_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[9]);
}

inline
void
CrossRequest_mref::omit_MDEntryPx() const
{
  (*this)[9].omit();
}

inline mfast::int64_cref
CrossRequest_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[10]);
}

inline mfast::int64_cref
CrossRequest_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[10]);
}

inline mfast::int64_mref
CrossRequest_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[10]);
}

inline
DepthSnapshot_cref::DepthSnapshot_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
DepthSnapshot_cref::DepthSnapshot_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, DepthSnapshot_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
DepthSnapshot_cref::DepthSnapshot_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
DepthSnapshot_cref::DepthSnapshot_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
DepthSnapshot_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void DepthSnapshot_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, default_operator_tag, properties_type< 2> >, ext_cref< typename MDSshGrp_cref::reference, sequence_element_tag,properties_type< 42> > > ((*this)[14]) );
}

inline
DepthSnapshot_mref::DepthSnapshot_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
DepthSnapshot_mref::DepthSnapshot_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, DepthSnapshot_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
DepthSnapshot_mref::DepthSnapshot_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
DepthSnapshot_mref::DepthSnapshot_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
DepthSnapshot_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void DepthSnapshot_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, default_operator_tag, properties_type< 2> >, ext_mref< typename MDSshGrp_mref::reference, sequence_element_tag,properties_type< 42> > > ((*this)[14]) );
}

inline
DepthSnapshot::DepthSnapshot(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
DepthSnapshot::DepthSnapshot(
  const DepthSnapshot_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
DepthSnapshot::DepthSnapshot(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline DepthSnapshot::cref_type
DepthSnapshot::ref() const
{
  return DepthSnapshot::cref_type(my_storage_.of_group.content_, instruction());
}

inline DepthSnapshot::cref_type
DepthSnapshot::cref() const
{
  return DepthSnapshot::cref_type(my_storage_.of_group.content_, instruction());
}

inline DepthSnapshot::mref_type
DepthSnapshot::ref()
{
  return DepthSnapshot::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline DepthSnapshot::mref_type
DepthSnapshot::mref()
{
  return DepthSnapshot::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
DepthSnapshot_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
DepthSnapshot_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_MsgSeqNum() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
DepthSnapshot_mref::omit_MsgSeqNum() const
{
  (*this)[1].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_LastMsgSeqNumProcessed() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_LastMsgSeqNumProcessed() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
DepthSnapshot_mref::omit_LastMsgSeqNumProcessed() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_RefreshIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_RefreshIndicator() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_RefreshIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
DepthSnapshot_mref::omit_RefreshIndicator() const
{
  (*this)[4].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::int64_cref
DepthSnapshot_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[6]);
}

inline mfast::int64_cref
DepthSnapshot_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[6]);
}

inline mfast::int64_mref
DepthSnapshot_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[6]);
}

inline mfast::ascii_string_cref
DepthSnapshot_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
DepthSnapshot_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_ProductComplex() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_SecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_SecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::get_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::try_get_TESSecurityStatus() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::set_TESSecurityStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
DepthSnapshot_mref::omit_TESSecurityStatus() const
{
  (*this)[10].omit();
}

inline mfast::int64_cref
DepthSnapshot_cref::get_LastUpdateTime() const
{
  return static_cast<mfast::int64_cref>((*this)[11]);
}

inline mfast::int64_cref
DepthSnapshot_cref::try_get_LastUpdateTime() const
{
  return static_cast<mfast::int64_cref>((*this)[11]);
}

inline mfast::int64_mref
DepthSnapshot_mref::set_LastUpdateTime() const
{
  return static_cast<mfast::int64_mref>((*this)[11]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::get_TotalBuyQuantity() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::try_get_TotalBuyQuantity() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::set_TotalBuyQuantity() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
DepthSnapshot_mref::omit_TotalBuyQuantity() const
{
  (*this)[12].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::get_TotalSellQuantity() const
{
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::try_get_TotalSellQuantity() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[13]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::set_TotalSellQuantity() const
{
  return static_cast<mfast::decimal_mref>((*this)[13]);
}

inline
void
DepthSnapshot_mref::omit_TotalSellQuantity() const
{
  (*this)[13].omit();
}

inline DepthSnapshot_cref::MDSshGrp_cref
DepthSnapshot_cref::get_MDSshGrp() const
{
  return static_cast<DepthSnapshot_cref::MDSshGrp_cref>((*this)[14]);
}

inline DepthSnapshot_cref::MDSshGrp_cref
DepthSnapshot_cref::try_get_MDSshGrp() const
{
  return static_cast<DepthSnapshot_cref::MDSshGrp_cref>((*this)[14]);
}

inline DepthSnapshot_mref::MDSshGrp_mref
DepthSnapshot_mref::set_MDSshGrp() const
{
  return static_cast<DepthSnapshot_mref::MDSshGrp_mref>((*this)[14]);
}

inline
DepthSnapshot_cref::MDSshGrp_element_cref::MDSshGrp_element_cref(
  const mfast::value_storage*   storage,
  DepthSnapshot_cref::MDSshGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
DepthSnapshot_mref::MDSshGrp_element_mref::MDSshGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  DepthSnapshot_mref::MDSshGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void DepthSnapshot_cref::MDSshGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint64_cref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_cref<decimal_cref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
}

template <typename Visitor>
inline void DepthSnapshot_mref::MDSshGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint64_mref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[18]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[19]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[20]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[21]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 1> > ((*this)[22]) );
  visitor.visit(ext_mref<decimal_mref, default_operator_tag, properties_type< 1> > ((*this)[23]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[24]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[25]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[26]) );
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDOriginType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDOriginType() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDOriginType() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDBookType() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDBookType() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDBookType() const
{
  (*this)[2].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDSubBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDSubBookType() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDSubBookType() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDSubBookType() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TrdType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TrdType() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TrdType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TrdType() const
{
  (*this)[4].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TradingSessionID() const
{
  (*this)[5].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TradingSessionSubID() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TradingSessionSubID() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TradingSessionSubID() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TradingSessionSubID() const
{
  (*this)[6].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TESTradSesStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TESTradSesStatus() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TESTradSesStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TESTradSesStatus() const
{
  (*this)[7].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_SecurityTradingStatus() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_SecurityTradingStatus() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_SecurityTradingStatus() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MarketCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MarketCondition() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MarketCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MarketCondition() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_FastMarketIndicator() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_FastMarketIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_FastMarketIndicator() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_SecurityTradingEvent() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_SecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_SecurityTradingEvent() const
{
  (*this)[11].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_PotentialSecurityTradingEvent() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_PotentialSecurityTradingEvent() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_PotentialSecurityTradingEvent() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_PotentialSecurityTradingEvent() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_SoldOutIndicator() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_SoldOutIndicator() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_SoldOutIndicator() const
{
  (*this)[13].omit();
}

inline mfast::uint64_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::uint64_cref>((*this)[14]);
}

inline mfast::uint64_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TradeCondition() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[14]);
}

inline mfast::uint64_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::uint64_mref>((*this)[14]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TradeCondition() const
{
  (*this)[14].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MultiLegReportingType() const
{
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MultiLegReportingType() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[15]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MultiLegReportingType() const
{
  return static_cast<mfast::uint32_mref>((*this)[15]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MultiLegReportingType() const
{
  (*this)[15].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MultiLegPriceModel() const
{
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MultiLegPriceModel() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[16]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MultiLegPriceModel() const
{
  return static_cast<mfast::uint32_mref>((*this)[16]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MultiLegPriceModel() const
{
  (*this)[16].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[17]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_QuoteCondition() const
{
  (*this)[17].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[18]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[18]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDEntryPx() const
{
  (*this)[18].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::decimal_cref>((*this)[19]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[19].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[19]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::decimal_mref>((*this)[19]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDEntrySize() const
{
  (*this)[19].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[20]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[20].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[20]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[20]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_NumberOfOrders() const
{
  (*this)[20].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[21].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[21]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[21]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDPriceLevel() const
{
  (*this)[21].omit();
}

inline mfast::int64_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::int64_cref>((*this)[22]);
}

inline mfast::int64_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[22].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[22]);
}

inline mfast::int64_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::int64_mref>((*this)[22]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_MDEntryTime() const
{
  (*this)[22].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_NonDisclosedTradeVolume() const
{
  return static_cast<mfast::decimal_cref>((*this)[23]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_NonDisclosedTradeVolume() const
{
  if ((*this)[23].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[23]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_NonDisclosedTradeVolume() const
{
  return static_cast<mfast::decimal_mref>((*this)[23]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_NonDisclosedTradeVolume() const
{
  (*this)[23].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TotalTradedValue() const
{
  return static_cast<mfast::decimal_cref>((*this)[24]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TotalTradedValue() const
{
  if ((*this)[24].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[24]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TotalTradedValue() const
{
  return static_cast<mfast::decimal_mref>((*this)[24]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TotalTradedValue() const
{
  (*this)[24].omit();
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_AverageTradedPrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[25]);
}

inline mfast::decimal_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_AverageTradedPrice() const
{
  if ((*this)[25].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[25]);
}

inline mfast::decimal_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_AverageTradedPrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[25]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_AverageTradedPrice() const
{
  (*this)[25].omit();
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::get_TotalNumOfTrades() const
{
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_cref
DepthSnapshot_cref::MDSshGrp_element_cref::try_get_TotalNumOfTrades() const
{
  if ((*this)[26].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[26]);
}

inline mfast::uint32_mref
DepthSnapshot_mref::MDSshGrp_element_mref::set_TotalNumOfTrades() const
{
  return static_cast<mfast::uint32_mref>((*this)[26]);
}

inline
void
DepthSnapshot_mref::MDSshGrp_element_mref::omit_TotalNumOfTrades() const
{
  (*this)[26].omit();
}

inline
IndexStats_cref::IndexStats_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
IndexStats_cref::IndexStats_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, IndexStats_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
IndexStats_cref::IndexStats_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
IndexStats_cref::IndexStats_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
IndexStats_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void IndexStats_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<int64_cref, delta_operator_tag, properties_type< 0> > ((*this)[14]) );
}

inline
IndexStats_mref::IndexStats_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
IndexStats_mref::IndexStats_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, IndexStats_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
IndexStats_mref::IndexStats_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
IndexStats_mref::IndexStats_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
IndexStats_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void IndexStats_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[4]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<int64_mref, delta_operator_tag, properties_type< 0> > ((*this)[14]) );
}

inline
IndexStats::IndexStats(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
IndexStats::IndexStats(
  const IndexStats_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
IndexStats::IndexStats(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline IndexStats::cref_type
IndexStats::ref() const
{
  return IndexStats::cref_type(my_storage_.of_group.content_, instruction());
}

inline IndexStats::cref_type
IndexStats::cref() const
{
  return IndexStats::cref_type(my_storage_.of_group.content_, instruction());
}

inline IndexStats::mref_type
IndexStats::ref()
{
  return IndexStats::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline IndexStats::mref_type
IndexStats::mref()
{
  return IndexStats::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
IndexStats_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
IndexStats_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
IndexStats_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
IndexStats_cref::try_get_MsgSeqNum() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
IndexStats_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
IndexStats_mref::omit_MsgSeqNum() const
{
  (*this)[1].omit();
}

inline mfast::uint32_cref
IndexStats_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
IndexStats_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
IndexStats_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
IndexStats_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
IndexStats_cref::try_get_MarketSegmentID() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
IndexStats_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
IndexStats_mref::omit_MarketSegmentID() const
{
  (*this)[3].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexHigh() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexHigh() const
{
  if ((*this)[4].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexHigh() const
{
  return static_cast<mfast::decimal_mref>((*this)[4]);
}

inline
void
IndexStats_mref::omit_IndexHigh() const
{
  (*this)[4].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexLow() const
{
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexLow() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexLow() const
{
  return static_cast<mfast::decimal_mref>((*this)[5]);
}

inline
void
IndexStats_mref::omit_IndexLow() const
{
  (*this)[5].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexOpen() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexOpen() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexOpen() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
IndexStats_mref::omit_IndexOpen() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexClose() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexClose() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexClose() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
IndexStats_mref::omit_IndexClose() const
{
  (*this)[7].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexValue() const
{
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexValue() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[8]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexValue() const
{
  return static_cast<mfast::decimal_mref>((*this)[8]);
}

inline
void
IndexStats_mref::omit_IndexValue() const
{
  (*this)[8].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexLifeHigh() const
{
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexLifeHigh() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[9]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexLifeHigh() const
{
  return static_cast<mfast::decimal_mref>((*this)[9]);
}

inline
void
IndexStats_mref::omit_IndexLifeHigh() const
{
  (*this)[9].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_IndexLifeLow() const
{
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_IndexLifeLow() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_mref
IndexStats_mref::set_IndexLifeLow() const
{
  return static_cast<mfast::decimal_mref>((*this)[10]);
}

inline
void
IndexStats_mref::omit_IndexLifeLow() const
{
  (*this)[10].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_Index52WeekHigh() const
{
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_Index52WeekHigh() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[11]);
}

inline mfast::decimal_mref
IndexStats_mref::set_Index52WeekHigh() const
{
  return static_cast<mfast::decimal_mref>((*this)[11]);
}

inline
void
IndexStats_mref::omit_Index52WeekHigh() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
IndexStats_cref::get_Index52WeekLow() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
IndexStats_cref::try_get_Index52WeekLow() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
IndexStats_mref::set_Index52WeekLow() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
IndexStats_mref::omit_Index52WeekLow() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
IndexStats_cref::get_CloseIndexFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
IndexStats_cref::try_get_CloseIndexFlag() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
IndexStats_mref::set_CloseIndexFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
IndexStats_mref::omit_CloseIndexFlag() const
{
  (*this)[13].omit();
}

inline mfast::int64_cref
IndexStats_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[14]);
}

inline mfast::int64_cref
IndexStats_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[14]);
}

inline mfast::int64_mref
IndexStats_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[14]);
}

inline
TopOfBookImplied_cref::TopOfBookImplied_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
TopOfBookImplied_cref::TopOfBookImplied_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, TopOfBookImplied_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
TopOfBookImplied_cref::TopOfBookImplied_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
TopOfBookImplied_cref::TopOfBookImplied_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
TopOfBookImplied_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void TopOfBookImplied_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDIncGrp_cref::reference, sequence_element_tag,properties_type< 12> > > ((*this)[4]) );
}

inline
TopOfBookImplied_mref::TopOfBookImplied_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
TopOfBookImplied_mref::TopOfBookImplied_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, TopOfBookImplied_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
TopOfBookImplied_mref::TopOfBookImplied_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
TopOfBookImplied_mref::TopOfBookImplied_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
TopOfBookImplied_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void TopOfBookImplied_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDIncGrp_mref::reference, sequence_element_tag,properties_type< 12> > > ((*this)[4]) );
}

inline
TopOfBookImplied::TopOfBookImplied(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
TopOfBookImplied::TopOfBookImplied(
  const TopOfBookImplied_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
TopOfBookImplied::TopOfBookImplied(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline TopOfBookImplied::cref_type
TopOfBookImplied::ref() const
{
  return TopOfBookImplied::cref_type(my_storage_.of_group.content_, instruction());
}

inline TopOfBookImplied::cref_type
TopOfBookImplied::cref() const
{
  return TopOfBookImplied::cref_type(my_storage_.of_group.content_, instruction());
}

inline TopOfBookImplied::mref_type
TopOfBookImplied::ref()
{
  return TopOfBookImplied::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline TopOfBookImplied::mref_type
TopOfBookImplied::mref()
{
  return TopOfBookImplied::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
TopOfBookImplied_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
TopOfBookImplied_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline TopOfBookImplied_cref::MDIncGrp_cref
TopOfBookImplied_cref::get_MDIncGrp() const
{
  return static_cast<TopOfBookImplied_cref::MDIncGrp_cref>((*this)[4]);
}

inline TopOfBookImplied_cref::MDIncGrp_cref
TopOfBookImplied_cref::try_get_MDIncGrp() const
{
  return static_cast<TopOfBookImplied_cref::MDIncGrp_cref>((*this)[4]);
}

inline TopOfBookImplied_mref::MDIncGrp_mref
TopOfBookImplied_mref::set_MDIncGrp() const
{
  return static_cast<TopOfBookImplied_mref::MDIncGrp_mref>((*this)[4]);
}

inline
TopOfBookImplied_cref::MDIncGrp_element_cref::MDIncGrp_element_cref(
  const mfast::value_storage*   storage,
  TopOfBookImplied_cref::MDIncGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
TopOfBookImplied_mref::MDIncGrp_element_mref::MDIncGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  TopOfBookImplied_mref::MDIncGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void TopOfBookImplied_cref::MDIncGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_cref<int64_cref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
}

template <typename Visitor>
inline void TopOfBookImplied_mref::MDIncGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 1> > ((*this)[7]) );
  visitor.visit(ext_mref<int64_mref, copy_operator_tag, properties_type< 1> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDSubBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDSubBookType() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDSubBookType() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::int64_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::decimal_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDEntryPx() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[6]);
}

inline mfast::decimal_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[6]);
}

inline
void
TopOfBookImplied_mref::MDIncGrp_element_mref::omit_MDEntryPx() const
{
  (*this)[6].omit();
}

inline mfast::decimal_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline
void
TopOfBookImplied_mref::MDIncGrp_element_mref::omit_MDEntrySize() const
{
  (*this)[7].omit();
}

inline mfast::int64_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::int64_cref>((*this)[8]);
}

inline mfast::int64_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_MDEntryTime() const
{
  if ((*this)[8].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int64_cref>((*this)[8]);
}

inline mfast::int64_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::int64_mref>((*this)[8]);
}

inline
void
TopOfBookImplied_mref::MDIncGrp_element_mref::omit_MDEntryTime() const
{
  (*this)[8].omit();
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
TopOfBookImplied_cref::MDIncGrp_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
TopOfBookImplied_mref::MDIncGrp_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline
void
TopOfBookImplied_mref::MDIncGrp_element_mref::omit_QuoteCondition() const
{
  (*this)[9].omit();
}

inline
FlexibleInstrumentUpdate_cref::FlexibleInstrumentUpdate_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
FlexibleInstrumentUpdate_cref::FlexibleInstrumentUpdate_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, FlexibleInstrumentUpdate_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
FlexibleInstrumentUpdate_cref::FlexibleInstrumentUpdate_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
FlexibleInstrumentUpdate_cref::FlexibleInstrumentUpdate_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
FlexibleInstrumentUpdate_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void FlexibleInstrumentUpdate_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_cref<decimal_cref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> >, ext_cref< typename MarketSegmentGrp_cref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_cref<int64_cref, none_operator_tag, properties_type< 0> > ((*this)[16]) );
}

inline
FlexibleInstrumentUpdate_mref::FlexibleInstrumentUpdate_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
FlexibleInstrumentUpdate_mref::FlexibleInstrumentUpdate_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, FlexibleInstrumentUpdate_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
FlexibleInstrumentUpdate_mref::FlexibleInstrumentUpdate_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
FlexibleInstrumentUpdate_mref::FlexibleInstrumentUpdate_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
FlexibleInstrumentUpdate_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void FlexibleInstrumentUpdate_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[3]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[5]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[9]) );
  visitor.visit(ext_mref<decimal_mref, none_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[11]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[14]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> >, ext_mref< typename MarketSegmentGrp_mref::reference, sequence_element_tag,properties_type< 2> > > ((*this)[15]) );
  visitor.visit(ext_mref<int64_mref, none_operator_tag, properties_type< 0> > ((*this)[16]) );
}

inline
FlexibleInstrumentUpdate::FlexibleInstrumentUpdate(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
FlexibleInstrumentUpdate::FlexibleInstrumentUpdate(
  const FlexibleInstrumentUpdate_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
FlexibleInstrumentUpdate::FlexibleInstrumentUpdate(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline FlexibleInstrumentUpdate::cref_type
FlexibleInstrumentUpdate::ref() const
{
  return FlexibleInstrumentUpdate::cref_type(my_storage_.of_group.content_, instruction());
}

inline FlexibleInstrumentUpdate::cref_type
FlexibleInstrumentUpdate::cref() const
{
  return FlexibleInstrumentUpdate::cref_type(my_storage_.of_group.content_, instruction());
}

inline FlexibleInstrumentUpdate::mref_type
FlexibleInstrumentUpdate::ref()
{
  return FlexibleInstrumentUpdate::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline FlexibleInstrumentUpdate::mref_type
FlexibleInstrumentUpdate::mref()
{
  return FlexibleInstrumentUpdate::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::try_get_MsgType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_SenderCompID() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::try_get_SecurityUpdateAction() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::int64_cref
FlexibleInstrumentUpdate_cref::get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_cref
FlexibleInstrumentUpdate_cref::try_get_SecurityID() const
{
  return static_cast<mfast::int64_cref>((*this)[4]);
}

inline mfast::int64_mref
FlexibleInstrumentUpdate_mref::set_SecurityID() const
{
  return static_cast<mfast::int64_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_cref
FlexibleInstrumentUpdate_cref::try_get_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[6]);
}

inline mfast::ascii_string_mref
FlexibleInstrumentUpdate_mref::set_SecurityDesc() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[6]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_SecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_SecurityType() const
{
  return static_cast<mfast::uint32_cref>((*this)[7]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_SecurityType() const
{
  return static_cast<mfast::uint32_mref>((*this)[7]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_ProductComplex() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_ProductComplex() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_MaturityDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[9]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_MaturityDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[9]);
}

inline mfast::decimal_cref
FlexibleInstrumentUpdate_cref::get_StrikePrice() const
{
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_cref
FlexibleInstrumentUpdate_cref::try_get_StrikePrice() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[10]);
}

inline mfast::decimal_mref
FlexibleInstrumentUpdate_mref::set_StrikePrice() const
{
  return static_cast<mfast::decimal_mref>((*this)[10]);
}

inline
void
FlexibleInstrumentUpdate_mref::omit_StrikePrice() const
{
  (*this)[10].omit();
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_PutOrCall() const
{
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_PutOrCall() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[11]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_PutOrCall() const
{
  return static_cast<mfast::uint32_mref>((*this)[11]);
}

inline
void
FlexibleInstrumentUpdate_mref::omit_PutOrCall() const
{
  (*this)[11].omit();
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_OptAttribute() const
{
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_OptAttribute() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[12]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_OptAttribute() const
{
  return static_cast<mfast::uint32_mref>((*this)[12]);
}

inline
void
FlexibleInstrumentUpdate_mref::omit_OptAttribute() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_ExerciseStyle() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_ExerciseStyle() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_ExerciseStyle() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
FlexibleInstrumentUpdate_mref::omit_ExerciseStyle() const
{
  (*this)[13].omit();
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::get_SettlMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::try_get_SettlMethod() const
{
  return static_cast<mfast::uint32_cref>((*this)[14]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::set_SettlMethod() const
{
  return static_cast<mfast::uint32_mref>((*this)[14]);
}

inline FlexibleInstrumentUpdate_cref::MarketSegmentGrp_cref
FlexibleInstrumentUpdate_cref::get_MarketSegmentGrp() const
{
  return static_cast<FlexibleInstrumentUpdate_cref::MarketSegmentGrp_cref>((*this)[15]);
}

inline FlexibleInstrumentUpdate_cref::MarketSegmentGrp_cref
FlexibleInstrumentUpdate_cref::try_get_MarketSegmentGrp() const
{
  return static_cast<FlexibleInstrumentUpdate_cref::MarketSegmentGrp_cref>((*this)[15]);
}

inline FlexibleInstrumentUpdate_mref::MarketSegmentGrp_mref
FlexibleInstrumentUpdate_mref::set_MarketSegmentGrp() const
{
  return static_cast<FlexibleInstrumentUpdate_mref::MarketSegmentGrp_mref>((*this)[15]);
}

inline
FlexibleInstrumentUpdate_cref::MarketSegmentGrp_element_cref::MarketSegmentGrp_element_cref(
  const mfast::value_storage*   storage,
  FlexibleInstrumentUpdate_cref::MarketSegmentGrp_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
FlexibleInstrumentUpdate_mref::MarketSegmentGrp_element_mref::MarketSegmentGrp_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  FlexibleInstrumentUpdate_mref::MarketSegmentGrp_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void FlexibleInstrumentUpdate_cref::MarketSegmentGrp_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
}

template <typename Visitor>
inline void FlexibleInstrumentUpdate_mref::MarketSegmentGrp_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::MarketSegmentGrp_element_cref::get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
FlexibleInstrumentUpdate_cref::MarketSegmentGrp_element_cref::try_get_MarketSegmentID() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
FlexibleInstrumentUpdate_mref::MarketSegmentGrp_element_mref::set_MarketSegmentID() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::int64_cref
FlexibleInstrumentUpdate_cref::get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[16]);
}

inline mfast::int64_cref
FlexibleInstrumentUpdate_cref::try_get_TransactTime() const
{
  return static_cast<mfast::int64_cref>((*this)[16]);
}

inline mfast::int64_mref
FlexibleInstrumentUpdate_mref::set_TransactTime() const
{
  return static_cast<mfast::int64_mref>((*this)[16]);
}

inline
Reset_cref::Reset_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Reset_cref::Reset_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, Reset_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Reset_cref::Reset_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
Reset_cref::Reset_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Reset_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Reset_cref::accept(Visitor& )
{
  using namespace mfast;
}

inline
Reset_mref::Reset_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Reset_mref::Reset_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, Reset_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Reset_mref::Reset_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
Reset_mref::Reset_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Reset_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Reset_mref::accept(Visitor& )
{
  using namespace mfast;
}

inline
Reset::Reset(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
Reset::Reset(
  const Reset_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
Reset::Reset(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline Reset::cref_type
Reset::ref() const
{
  return Reset::cref_type(my_storage_.of_group.content_, instruction());
}

inline Reset::cref_type
Reset::cref() const
{
  return Reset::cref_type(my_storage_.of_group.content_, instruction());
}

inline Reset::mref_type
Reset::ref()
{
  return Reset::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline Reset::mref_type
Reset::mref()
{
  return Reset::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

